{
    "bd69029e-6277-42a8-9596-d9186709a7e7": {
        "name": "P. Harsha Venkata Sai",
        "easy": [
            {
                "question": "### Student Performance Evaluation \n\nYou are tasked with developing a function to evaluate a student's performance based on their marks. The function should determine whether the student has passed or failed the subject and calculate the Activity points based on their performance.\n\n\nYou are given an integer `marks`, representing the student's marks.\n\n1. <HighlightedText> Pass/Fail Criteria:</HighlightedText>  \n   - The student `passes` if their marks are greater than or equal to 50.\n   - The student `fails` if their marks are less than 50.\n\n2. <HighlightedText> Activity points Calculation: </HighlightedText>\n   - If the student `passes` and their marks are greater than or equal to 75, they receive the Activity points of 20% of their marks.\n   - If the student `passes` and their marks are between 50 and 74 (inclusive), they receive the Activity points of 10% of their marks.\n   - If the student `fails`, they receive the Activity points of 0% of their marks.\n\nComplete the given function `evaluateStudent` that receives the marks and prints the student's criteria: (\"Pass\" or \"Fail\") and the Activity points, rounded to two decimal places.\n\n\n\n\n\n---\n\n#### Input Format:\n\n- A single integer `marks` representing the student's marks.\n\n#### Output Format:\n\n- The function should print two values space-seperatedly:\n  - The student's criteria: (\"Pass\" or \"Fail\").\n  - The Activity points, rounded to two decimal places.\n\n---\n\n#### Constraints:\n 0 ≤ `marks` ≤ 100\n \n---\n\n#### Example:\n\n###### Input:\n\n```\n80\n```\n\n###### Output:\n\n```\nPass 16.00\n```\n\n###### Explanation:\n\n1. <HighlightedText>Passing Criteria :</HighlightedText>  \n   - The student has 80 marks, which is greater than or equal to 75.  \n   - Since the student’s marks are greater than or equal to 75, they pass the subject. \n\n2. <HighlightedText> Activity points Calculation : </HighlightedText>\n   - The student is eligible for 20% Activity points since their marks are greater than or equal to 75.\n   - Activity points = `80 * 20% = 16.00`. \n\nThus, the output is: `Pass 16.00`. \n\n\n\n\n\n\n\n---",
                "answer": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass solution {\npublic:\n    void evaluateStudent(int marks) {\n        double activityPoints=0.0;\n        string criteria;\n        if (marks>=50){\n            criteria=\"Pass\";\n            if (marks>=75){\n                activityPoints=marks*0.20;\n            }\n            \n        }\n        else{\n                criteria=\"Fail\";\n                activityPoints=0.0;\n            }\n            cout<<criteria<<\" \"<<fixed<<setprecision(2)<<activityPoints<<endl;\n    }\n};\n\n"
            },
            {
                "question": "### Average of Multiples\n\nyou are tasked with calculating the average of a series of numbers. Specifically, you need to compute the average of the first `P` multiples of a given integer `N`. The integer `N` represents a base number, and `P` represents how many multiples of `N` we need to consider.\n\n\nYour task is to complete the given function that receives  N and  P, and calculates the average of the first P multiples of N.\n\n\n<MultiLineNote>\n- Ensure that you discard any decimal part of the result when calculating the average.\n</MultiLineNote>\n\n---\n\n#### Input Format\n- The first line contains an integer `N`, which represents the base number whose multiples will be considered.\n- The second line contains an integer `P`, which represents the number of multiples of `N` to include in the calculation.\n\n#### Output Format\n- The function should print an integer representing the average of the first `P` multiples of `N`.\n\n---\n\n\n### Constraints \n\n- 1 ≤ N ≤ 10<sup>5</sup>\n\n- 1 ≤ P ≤ 10<sup>5</sup>\n\n---\n\n#### Example\n\n###### Sample Input:\n```\n6\n5\n```\n\n###### **Sample Output:**\n```\n18\n```\n\n###### Explanation:\n- In this case, the first 5 multiples of `6` are: `6, 12, 18, 24, 30`.\n- The sum of these multiples is: `6 + 12 + 18 + 24 + 30 = 90`.\n- The average is: `90 / 5 = 18`.\n\n---\n\n\n\n\n\n",
                "answer": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass solution {\npublic:\n    int averageOfMultiples(int N, int P) {\n        int sum=0;\n        for(int i=1 ; i<=P; i++){\n            sum+=N*i;\n        }\n        cout<<sum/P<<endl;\n        \n    }\n};\n"
            },
            {
                "question": "### Pizza Area Calculator\n\nYou are tasked with developing a function to calculate the area of a circular pizza for a restaurant's ordering system. The function should determine the pizza's area based on its diameter and provide the result rounded to two decimal places for accurate ingredient measurements.\n\nYou are given a number `diameter`, representing the pizza's diameter in inches.\n\n1. <HighlightedText>Area Calculation Criteria :</HighlightedText>\n   - The area should be calculated using the formula: `Area` = π × radius<sup>2</sup>\n   - Radius is half of the diameter `(radius = diameter / 2)`\n   - Use `π = 3.14159` for calculations\n\n2. <HighlightedText>Output Requirements :</HighlightedText>\n   - The result must be rounded to two decimal places.\n\nComplete the given function `calculatePizzaArea` that receives the diameter and prints the calculated area.\n\n<MultiLineNote>\n- Results must be precise to two decimal places for ingredient measurements.\n\n</MultiLineNote>\n\n---\n\n####Input Format\n- A single number `diameter` representing the pizza's diameter in inches.\n\n####Output Format\n- A single number representing the pizza's area in square inches, rounded to two decimal places.\n\n---\n\n#### Constraints\n 0 ≤ diameter ≤ 24\n\n---\n\n#### Example\n\n######Input:\n\n```\n12\n```\n\n######Output:\n\n```\n113.10\n```\n\n######Explanation:\n\n1. <HighlightedText>Radius Calculation:  </HighlightedText>\n   - Diameter = 12 inches  \n   - Radius = 12 / 2 = 6 inches\n\n2. <HighlightedText>Area Calculation:  </HighlightedText>\n   - Area = 3.14159 × (6)<sup>2</sup> = 113.09724  \n   - Rounded to two decimal places = 113.10\n\nThus, the output is: `113.10`.\n\n---\n\n\n\n",
                "answer": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass solution {\npublic:\n    void calculatePizzaArea(double diameter) {\n        double radius=diameter/2;\n        double area=3.14159*pow(radius,2);\n        cout<<fixed<<setprecision(2)<<area<<endl;\n    }\n};\n"
            },
            {
                "question": "### Largest Among Three\n\nYou are tasked with developing a simple application for a calculator app that allows users to input three numbers and then determines the largest number from the three. The app will display the largest number to the user for various purposes such as making decisions or comparing values.\n\nComplete the given function `findLargest` that receives three integers as input and prints the largest number among them.\n\n---\n\n#### Input Format\n\n- Three space-separated integers `a`, `b`, and `c` representing the three numbers.\n\n#### Output Format\n\n- The function should output a single integer that is the largest among three numbers.\n\n---\n\n\n#### Constraints\n  1 ≤ a, b, c ≤ 10<sup>3</sup>\n\n---\n\n#### Example\n\n###### Input:\n\n```\n10 20 15\n```\n\n###### Output:\n\n```\n20\n```\n\n###### Explanation:\n\n1. <HighlightedText>Comparing the Numbers : </HighlightedText>  \n   - The input numbers are `10`, `20`, and `15`.\n   - The largest number among these is `20`.\n\nThus, the output is: `20`.\n\n---\n",
                "answer": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    void findLargest(int a, int b, int c) {\n        \n        \n    }\n};\n"
            }
        ],
        "medium": [
            {
                "question": "### Prime Number Range \n\nYou are tasked with developing an application to evaluate whether numbers in a given range are prime numbers or not. \n\nComplete the given function `evaluatePrimes`, that receives a starting number and an ending number. The function should evaluate every number in the range (inclusive) to determine whether it is prime or not prime. For each number in the range, print `\"[number] is prime.\"` if the number is prime, and `\"[number] is not prime.\"` if it is not.\n\n\n\n<MultiLineNote>\n\n- A **prime number** is a number greater than 1 that is divisible only by 1 and itself.\n</MultiLineNote>\n\n\n---\n\n#### Input Format\n\n- Two space-separated integers, `start` and `end`. \n\n#### Output Format\n\n- A range of lines from start to end, where each line is a string\n\n---\n\n\n#### Constraints\n\n-  1 ≤ start ≤ end ≤ 10<sup>6</sup>\n\n---\n\n#### Example\n\n###### Input\n\n```\n5 10\n```\n\n###### Output\n\n```\n5 is prime.\n6 is not prime.\n7 is prime.\n8 is not prime.\n9 is not prime.\n10 is not prime.\n```\n\n###### Explanation\n\n1. <HighlightedText>Evaluating Primes:</HighlightedText>  \n   - The numbers in the range are: `5, 6, 7, 8, 9, 10`.\n   - `5` is prime.\n   - `6` is not prime.\n   - `7` is prime.\n   - `8` is not prime.\n   - `9` is not prime.\n   - `10` is not prime.\n\nThus, the output is:  \n\n```\n5 is prime.  \n6 is not prime.  \n7 is prime.  \n8 is not prime.  \n9 is not prime.  \n10 is not prime.\n\n```\n\n---\n\n",
                "answer": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isPrime(int n){\n        if (n<=1){\n            return false;\n        }\n        for (int i=2;i*i<=n;++i){\n            if (n%i==0){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    void evaluatePrimes(int start, int end) {\n        for (int i=start ; i<=end;++i){\n            if (isPrime(i)){\n                cout<<i<<\" is prime.\"<<endl;\n            }\n            else{\n                cout<<i<<\" is not prime.\"<<endl;\n            }\n        }\n    }\n};\n"
            },
            {
                "question": "### Data Compression for File Storage\n\nYou are working on a project where you need to compress text data in order to save storage space. \nTo do compression you will replace consecutive identical characters with the character followed by the number of times it appears. \n\nImplement the given function `evaluateCompression(string s)` that takes a string `s` representing file data and print its compressed version. \n\n_Note: If the compressed string is not shorter than the original string, print the original string to avoid unnecessary storage overhead._\n\n---\n\n#### Input Format\n- Single line containing string `s` representing the data in the file.\n\n#### Output Format\n- Single line having compressed string. \n\n---\n\n#### Constraints\n- 1 ≤`s.size()`≤ 10<sup>5</sup>.\n- `s` contains only english alphabets.\n\n---\n\n#### Example\n\n###### Input\n    aaabbccaa\n\n###### Output\n    a3b2c2a2\n\n###### Explanation\n\n- The string \"aaabbccaa\" is compressed into \"a3b2c2a2\":\n  - \"a3\" means 'a' appears 3 times consecutively,\n  - \"b2\" means 'b' appears 2 times consecutively,\n  - \"c2\" means 'c' appears 2 times consecutively,\n  - \"a2\" means 'a' appears 2 times consecutively.\n\n---\n",
                "answer": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    \n    void evaluateCompression(string s) {\n        if (s.empty()){\n            cout<<\"\"<<endl;\n            return;\n        }\n        string compressed_s=\"\";\n        char current_char=s[0];\n        int count=1;\n        for (int i=1;i<s.length();++i){\n            if (s[i]==current_char){\n                count++;\n            }\n            else{\n                compressed_s+=current_char;\n                if (count>1){\n                    compressed_s+=to_string(count);\n                }\n                current_char=s[i];\n                count=1;\n                }\n            }\n            compressed_s+=current_char;\n            if (count>1){\n                compressed_s+=to_string(count);\n            }\n            if (compressed_s.length()<s.length()){\n                cout<<compressed_s<<endl;\n            }else{\n                cout<<s<<endl;\n            }\n        }\n        \n    \n};\n"
            },
            {
                "question": "### Array Equilibrium Index\n\nYou are given an array of integers. Your task is to find the equilibrium index of the array. An equilibrium index is an index where the sum of elements to its left equals the sum of elements to its right. If no such index exists, return `-1`.\n\n<HighlightedText>Equilibrium Index Criteria:</HighlightedText>\n1. The sum of elements before the index (left sum) should equal the sum of elements after the index (right sum).\n2. If multiple equilibrium indices exist, return the one with the smallest index.\n3. The sum of elements to the left of the first index is considered `0`\n4. The sum of elements to the right of the last index is considered `0`.\n\nComplete the given function `findEquilibriumIndex` that takes an array and its size, then returns the equilibrium index or `-1`.\n\n_Note: Consider 0 based indexing_\n\n---\n\n#### Input Format\n- The first line contains a single integer `N`, the size of the array.\n- The second line contains `N` space-separated integers representing the array elements.\n\n#### Output Format\n- A single integer representing the equilibrium index or `-1`.\n\n---\n\n#### Constraints\n- 1 ≤`N`≤ 10<sup>5</sup>\n- -10<sup>9</sup> ≤`array[i]`≤ 10<sup>9</sup>\n\n---\n\n#### Example\n\n###### Input\n    5\n    1 2 3 2 1\n\n###### Output\n    2\n\n###### Explanation\n\n- At index 2:\n  - Left sum = 1 + 2 = 3\n  - Right sum = 2 + 1 = 3\n- Since left sum equals right sum, index 2 is an equilibrium index.\n\n---\n",
                "answer": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    int findEquilibriumIndex(int N, int arr[]) {\n        long long totalSum = 0;\n        for (int i= 0; i< N; ++i){\n            totalSum += arr[i];\n        }\n        long long leftSum =0;\n        for (int i = 0 ; i < N ; ++i){\n            long long rightSum =totalSum -leftSum -arr[i];\n            if (leftSum == rightSum){\n                return i;\n            }leftSum += arr[i];\n        }\n        return -1;\n    }\n};"
            }
        ],
        "hard": [
            {
                "question": "### Next Weaker Number\n\nYou are required to complete the function `next_weaker_number` that takes an array of integers `nums` and its size `n` as input arguments, such that it will calculate and print <HighlightedText>Next Weaker Number (NWN)</HighlightedText> for each number in `nums`.\n\nThe <HighlightedText>Next Weaker Number (NWN)</HighlightedText> for a number `nums[i]` is defined as the first number after `nums[i]` that is smaller than `nums[i]`. If no such number exists, the result for `nums[i]` should be `-1`.\n\n---\n\n#### Input Format\n- The first line consists of an integer `n`, representing the number of integers in `nums`.\n- The second line contains `n` space-separated integers representing the array `nums`.\n\n#### Output Format\n- Print `n` space-separated integers representing the <HighlightedText>Next Weaker Number (NWN)</HighlightedText> for each of the numbers in `nums`\n\n---\n\n#### Constraints\n-  1 ≤`n`≤ 1000\n-  0 ≤`nums[i]`≤ 1000\n\n---\n\n#### Example\n\n###### Input\n    5\n    9 4 5 2 1\n\n###### Output\n    4 2 2 1 -1\n\n###### Explanation\n\nFor the given array:\n\n- The <HighlightedText>Next Weaker Number</HighlightedText> for 9 is 4 (since 4 < 9 and 4 comes after 9).\n- The <HighlightedText>Next Weaker Number</HighlightedText> for 4 is 2 (since 2 < 4 and 2 comes after 4).\n- The <HighlightedText>Next Weaker Number</HighlightedText> for 5 is 2 (since 2 < 5 and 2 comes after 5).\n- The <HighlightedText>Next Weaker Number</HighlightedText> for 2 is 1 (since 1 < 2 and 1 comes after 2).\n- There is no <HighlightedText>Next Weaker Number</HighlightedText> for 1, so it is considered -1.\n\nThus, the output is: `4 2 2 1 -1`\n\n---\n",
                "answer": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    void next_weaker_number(int n, int nums[]) {\n       for (int i=0;i<n;++i){\n           int nwn=-1;\n           for (int j=i+1 ; j<n ; ++j){\n               if (nums[j]<nums[i]){\n                   nwn=nums[j];\n                   break;\n               }\n           }\n           cout<<nwn<<(i==n-1 ? \"\": \" \");\n       }\n       cout<<endl;\n    }\n};\n"
            },
            {
                "question": "###  Warehouse Inventory \n\nYou are working with an inventory management system for a warehouse. The warehouse keeps track of products in a 2D grid layout, where each cell contains the quantity of a specific product at a particular location. The system needs to rotate the entire inventory grid 90 degrees clockwise, as part of optimizing the warehouse's storage system.\n\n\nYour task is to complete the given function `rotateInventory` that:\n\n- Takes the size of the matrix, N, and the inventory matrix (2D array) as input.\n- Rotates the matrix 90 degrees in a clockwise direction.\n- Prints the rotated matrix, which represents the updated warehouse layout.\n\n\n<MultiLineNote>\n- The input matrix will always be square (i.e., the number of rows will be equal to the number of columns).\n\n</MultiLineNote>\n\n---\n\n#### Input Format\n- First line represents integer `N` (size of the square matrix, representing the layout of the warehouse).\n- Next N lines each  contains N space-separated integers representing the quantity of products in the corresponding grid cells of the warehouse.\n\n#### Output Format\n- N lines each  contains N space-separated integers, which is rotated matrix  after a 90-degree clockwise rotation, representing the updated product layout in the warehouse.\n\n---\n\n\n\n#### Constraints\n\n-  1 ≤ `N` ≤ 100\n\n\n-  -10<sup>9</sup> ≤ `matrix[i][j]` ≤ 10<sup>9</sup>\n\n\n---\n\n\n#### Example\n\n###### Input\n\n```\n3\n1 2 3\n4 5 6\n7 8 9\n```\n\n###### Output\n\n```\n7 4 1\n8 5 2\n9 6 3\n```\n\n\n\n#### Explanation\n\nIn this test case, we are given a <HighlightedText>3x3 matrix<HighlightedText>. We need to rotate the matrix 90 degrees <HighlightedText>clockwise<HighlightedText>.\n\n- The original matrix is:\n\n```\n1 2 3\n4 5 6\n7 8 9\n ```\n\nTo rotate the matrix 90 degrees clockwise, follow these steps:\n\n##### 1. First Row Becomes the Last Column: \n- The first row `[1, 2, 3]` becomes the last column in the rotated matrix:  \n\n#####2. Second Row Becomes the Second Last Column: \n   - The second row `[4, 5, 6]` becomes the second last column in the rotated matrix:  \n\n#####3. Third Row Becomes the First Column: \n   - The third row `[7, 8, 9]` becomes the first column in the rotated matrix:  \n\n<HighlightedText>Resulting Matrix after Rotation:</HighlightedText>\n\nAfter rotating 90 degrees clockwise, the new matrix looks like this:\n\n```\n7 4 1\n8 5 2\n9 6 3\n```\n\n\n---\n\n\n\n\n",
                "answer": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    void rotateInventory(int N, int arr[][100]) {\n        int rotated__arr[100][100];\n        for (int i=0 ; i<N ; ++i){\n            for (int j = 0; j< N; ++j){\n                rotated__arr[j][N-i-1]=arr[i][j];\n            }\n        }\n        for (int i=0 ; i< N ; ++i){\n            for (int j=0 ; j< N ; ++j){\n                cout << rotated__arr[i][j] << (j == N-1 ? \"\" : \" \");\n            }\n            cout << endl;\n        }\n    }\n};\n"
            }
        ]
    }
}